import { test, expect } from '@playwright/test'

test.describe('Authentication rate limiting', () => {
  test('successful login baseline', async ({ page }) => {
    await page.goto('/')
    await page.goto('/login')
    await page.fill('input[type="email"]', 'user@example.com')
    await page.fill('input[type="password"]', 'valid-password')
    await page.click('button[type="submit"]')
    await page.waitForURL('**/(dashboard|projects|/)$')
  })

  test('blocks after repeated failed attempts', async ({ page }) => {
    await page.goto('/login')
    // Perform 10 failed submissions, each awaiting its corresponding response
    for (let i = 0; i < 10; i++) {
      await page.fill('input[type="email"]', 'attacker@example.com')
      await page.fill('input[type="password"]', 'wrong')
      await Promise.all([
        page.waitForResponse((resp) => resp.url().includes('/api/auth') && resp.request().method() === 'POST'),
        page.click('button[type="submit"]'),
      ])
    }
    // 11th attempt: capture the response generated by the click and assert 429
    await page.fill('input[type="email"]', 'attacker@example.com')
    await page.fill('input[type="password"]', 'wrong')
    const [finalResponse] = await Promise.all([
      page.waitForResponse((resp) => resp.url().includes('/api/auth') && resp.request().method() === 'POST'),
      page.click('button[type="submit"]'),
    ])
    expect(finalResponse.status()).toBe(429)
  })
})


